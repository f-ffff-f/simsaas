// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id         Int        @id @default(autoincrement())
  name       String
  geometries Geometry[] // Project는 여러 Geometry를 가질 수 있음

  @@map("projects") // 테이블명을 명시적으로 projects로 지정 (선택 사항)
}

model Geometry {
  id        Int    @id @default(autoincrement())
  projectId Int // Foreign Key
  fileUrl   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // Project와의 관계 정의. Project 삭제 시 연관 Geometry도 삭제
  meshes    Mesh[] // Geometry는 여러 Mesh를 가질 수 있음

  @@map("geometries")
}

model Mesh {
  id         Int      @id @default(autoincrement())
  geometryId Int // Foreign Key
  resolution Int
  geometry   Geometry @relation(fields: [geometryId], references: [id], onDelete: Cascade) // Geometry와의 관계 정의. Geometry 삭제 시 연관 Mesh도 삭제
  jobs       Job[] // Mesh는 여러 Job에 사용될 수 있음

  @@map("meshes")
}

model Job {
  id         BigInt    @id @default(autoincrement())
  meshId     Int // Foreign Key
  status     JobStatus @default(PENDING)
  startedAt  DateTime?
  finishedAt DateTime?
  mesh       Mesh      @relation(fields: [meshId], references: [id], onDelete: Cascade) // Mesh와의 관계 정의. Mesh 삭제 시 연관 Job도 삭제
  result     Result? // Job은 하나 혹은 0개의 Result를 가질 수 있음 (1:0 or 1:1 관계)

  @@map("jobs")
}

model Result {
  id      Int    @id @default(autoincrement())
  jobId   BigInt @unique // Job과의 1:1 관계를 위해 jobId를 unique로 설정
  fileUrl String
  metrics Json
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade) // Job과의 관계 정의. Job 삭제 시 연관 Result도 삭제

  @@map("results")
}

enum JobStatus {
  PENDING
  RUNNING
  FAILED
  SUCCESS
}